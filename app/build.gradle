import com.android.build.gradle.api.ApplicationVariant

apply plugin: 'com.android.application'
apply from: '../autodimension.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.fabric'

def APP_ID = "com.fstyle.androidstructure"

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "${APP_ID}"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode rootProject.ext.versionCode
    versionName rootProject.ext.versionName

    vectorDrawables.useSupportLibrary = true
  }

  signingConfigs {
    debug {}

    release {

      if (!System.getenv('CI')) {
        def signFile = file("../local.properties")
        def signingProps = new Properties()

        signingProps.load(new FileInputStream(signFile))

        storeFile file("../keystores/keystore_release.keystore")
        storePassword signingProps['storePassword']
        keyAlias signingProps['keyAlias']
        keyPassword signingProps['keyPassword']
      }
    }
  }

  buildTypes {
    debug {
      versionNameSuffix = "dev"
      applicationIdSuffix = ".dev"
      signingConfig signingConfigs.debug

      applicationVariants.all { variant -> appendVersionNameVersionCode(variant)
      }
    }
    staging {
      versionNameSuffix = "stg"
      applicationIdSuffix = ".stg"
      signingConfig signingConfigs.debug

      applicationVariants.all { variant -> appendVersionNameVersionCode(variant)
      }
    }
    release {
      shrinkResources true
      minifyEnabled true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      applicationVariants.all { variant -> appendVersionNameVersionCode(variant)
      }
    }
  }
}

@SuppressWarnings("GroovyAssignabilityCheck")
def appendVersionNameVersionCode(variant) {
  variant.outputs.all { output ->
    def applicationId = variant.mergedFlavor.applicationId + (variant.buildType.applicationIdSuffix ==
        null ? "" : variant.buildType.applicationIdSuffix)
    String tmpOutputFileName = outputFileName
    if (variant instanceof ApplicationVariant) {
      def time = new Date().format("dd-MM-yyyy", TimeZone.getTimeZone("UTC"))
      def fileName = "${applicationId}_v${variant.versionName}_${variant.versionCode}_${time}-${variant.flavorName}-${variant.buildType.name}.apk"
      def defaultOutputDir = variant.packageApplicationProvider.get().outputDirectory
      tmpOutputFileName = new File(defaultOutputDir.absolutePath, fileName).name
    }
    outputFileName = tmpOutputFileName
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  Map<String, String> dependencies = rootProject.ext.dependencies;

  implementation dependencies.appCompatV7
  implementation dependencies.recyclerview
  implementation dependencies.constraintLayout

  implementation dependencies.rxJava
  implementation dependencies.rxAndroid

  implementation "androidx.core:core-ktx:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
    transitive = true
  }

  testImplementation dependencies.junit
  testImplementation dependencies.mockito
  androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
}

ktlint {
  version = "0.30.0"
  android = true
  reporters = [org.jlleitschuh.gradle.ktlint.reporter.ReporterType.CHECKSTYLE]
  ignoreFailures = true
  filter {
    exclude("**/generated/**")
    include("**/java/**")
  }
}

detekt {
  version = "1.0.0-RC14"
  input = files("src/main/java")
  filters = ".*/resources/.*,.*/build/.*"
  config = files("$rootDir/detekt.yml")
}
